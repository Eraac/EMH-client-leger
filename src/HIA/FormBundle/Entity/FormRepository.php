<?php

namespace HIA\FormBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * FormRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FormRepository extends EntityRepository
{
    public function getLast($idUser, $offset, $limit)
    {
        $qb = $this->createQueryBuilder('f')
                    ->leftJoin('f.tags', 't')
                    ->addSelect('t')
                    ->orderBy('f.dateCreate', 'DESC')

                    ->leftJoin('f.writers', 'g')
                    ->addSelect('g')

                    ->leftJoin('g.users', 'u')
                    ->addSelect('u')

                    ->where('u.id = :idUser')
                    ->setParameter("idUser", $idUser)

                    ->setFirstResult($offset)
                    ->setMaxResults($limit);

        $results = new Paginator($qb, true);

        return $results->getQuery()->getResult();
    }

    public function getAll($idUser, $offset, $limit)
    {
        $qb = $this->createQueryBuilder('f')
                    ->leftJoin('f.tags', 't')
                    ->addSelect('t')
                    ->orderBy('f.dateCreate', 'DESC')
                    ->leftJoin('f.writers', 'g')
                    ->leftJoin('g.users', 'u')
                    ->where('u.id = :idUser')
                    ->setParameter("idUser", $idUser)

                    ->setFirstResult($offset)
                    ->setMaxResults($limit);

        $results = new Paginator($qb, true);

        return $results->getQuery()->getResult();
    }

    public function getForms($idUser, $formName, $idTags, $offset, $limit)
    {
        $qb = $this->createQueryBuilder('f')
                    ->leftJoin('f.tags', 't')
                    ->addSelect('t')
                    ->orderBy('f.dateCreate', 'DESC')
                    ->leftJoin('f.writers', 'g')
                    ->leftJoin('g.users', 'u')
                    ->where('u.id = :idUser AND f.name LIKE :formName AND t.id IN (:tags)')
                    ->setParameters(array(
                            "idUser" =>  $idUser,
                            "formName" => "%" . $formName . "%",
                            "tags" => $idTags
                        ))

                    ->setFirstResult($offset)
                    ->setMaxResults($limit);

        $results = new Paginator($qb, true);

        return $results->getQuery()->getArrayResult();
    }
    
    public function countFormUserCanAccess($idUser)
    {
        $qb = $this->createQueryBuilder('f')
                    ->select("COUNT(f)")
                    ->leftJoin('f.writers', 'g')
                    ->leftJoin('g.users', 'u')
                    ->where('u.id = :idUser')
                    ->setParameters(array(
                            "idUser" =>  $idUser,
                        ));
        
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countFormUserCanAccessAjax($idUser, $formName, $idTags)
    {
        $qb = $this->createQueryBuilder('f')
            ->select('COUNT(f)')
            ->leftJoin('f.tags', 't')
            ->orderBy('f.dateCreate', 'DESC')
            ->leftJoin('f.writers', 'g')
            ->leftJoin('g.users', 'u')
            ->where('u.id = :idUser AND f.name LIKE :formName AND t.id IN (:tags)')
            ->setParameters(array(
                "idUser" =>  $idUser,
                "formName" => "%" . $formName . "%",
                "tags" => $idTags
            ));

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function canUse($idUser, $idForm)
    {
        $qb = $this->CreateQueryBuilder('f')
                    ->select("COUNT(f)")
                    ->leftJoin("f.writers", 'g')
                    ->leftJoin("g.users", 'u')
                    ->where("u.id = :idUser AND f.id = :idForm")
                    ->setParameters(array(
                        "idUser" => $idUser,
                        "idForm" => $idForm
                    ));

        return $qb->getQuery()->getSingleScalarResult();
    }
}
